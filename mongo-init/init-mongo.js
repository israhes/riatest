// mongo-init/init-mongo.js - Script de inicializaci√≥n de MongoDB
// Este script se ejecuta autom√°ticamente cuando se crea el contenedor de MongoDB

// Cambiar a la base de datos de la aplicaci√≥n
db = db.getSiblingDB('cobranza_ai');

// Crear usuario para la aplicaci√≥n
db.createUser({
  user: 'cobranza_user',
  pwd: 'cobranza_password_2024',
  roles: [
    {
      role: 'readWrite',
      db: 'cobranza_ai'
    }
  ]
});

// Crear √≠ndices para optimizar consultas
print('Creando √≠ndices para optimizaci√≥n...');

// √çndices para la colecci√≥n de clientes
db.clientes.createIndex({ "email": 1 }, { unique: true });
db.clientes.createIndex({ "telefono": 1 });
db.clientes.createIndex({ "nombre": "text", "empresa": "text" });
db.clientes.createIndex({ "activo": 1, "fechaRegistro": -1 });

// √çndices para la colecci√≥n de deudas
db.deudas.createIndex({ "clienteId": 1 });
db.deudas.createIndex({ "estado": 1, "diasMora": 1 });
db.deudas.createIndex({ "fechaVencimiento": 1 });
db.deudas.createIndex({ "facturaNumero": 1 }, { unique: true });
db.deudas.createIndex({ "clienteId": 1, "estado": 1 });

// √çndices para la colecci√≥n de comunicaciones
db.comunicaciones.createIndex({ "clienteId": 1, "fechaEnvio": -1 });
db.comunicaciones.createIndex({ "deudaId": 1 });
db.comunicaciones.createIndex({ "tipo": 1, "estado": 1 });
db.comunicaciones.createIndex({ "campaniaId": 1 });
db.comunicaciones.createIndex({ "fechaEnvio": 1 });

// √çndices para la colecci√≥n de usuarios
db.usuarios.createIndex({ "email": 1 }, { unique: true });
db.usuarios.createIndex({ "activo": 1 });

// √çndices para la colecci√≥n de plantillas
db.plantillas.createIndex({ "tipo": 1, "tono": 1, "diasMora": 1 });
db.plantillas.createIndex({ "activa": 1 });

// √çndices para la colecci√≥n de campa√±as
db.campanias.createIndex({ "tipo": 1, "activa": 1 });
db.campanias.createIndex({ "fechaCreacion": -1 });

// Crear colecciones con validaci√≥n de esquemas
print('Configurando validaci√≥n de esquemas...');

// Validaci√≥n para clientes
db.createCollection("clientes", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nombre", "email", "telefono"],
      properties: {
        nombre: {
          bsonType: "string",
          minLength: 2,
          maxLength: 100,
          description: "Nombre debe ser un string entre 2-100 caracteres"
        },
        email: {
          bsonType: "string",
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          description: "Email debe tener un formato v√°lido"
        },
        telefono: {
          bsonType: "string",
          pattern: "^\\+[1-9]\\d{1,14}$",
          description: "Tel√©fono debe tener formato internacional"
        },
        activo: {
          bsonType: "bool",
          description: "Activo debe ser un boolean"
        }
      }
    }
  }
});

// Validaci√≥n para deudas
db.createCollection("deudas", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["clienteId", "monto", "fechaVencimiento"],
      properties: {
        monto: {
          bsonType: "number",
          minimum: 0,
          description: "Monto debe ser un n√∫mero positivo"
        },
        estado: {
          enum: ["pendiente", "mora_temprana", "mora_media", "mora_avanzada", "pagada", "cancelada"],
          description: "Estado debe ser uno de los valores permitidos"
        },
        diasMora: {
          bsonType: "number",
          minimum: 0,
          description: "D√≠as de mora debe ser un n√∫mero no negativo"
        }
      }
    }
  }
});

// Configurar TTL para logs de comunicaciones (mantener solo 1 a√±o)
db.comunicaciones.createIndex(
  { "fechaEnvio": 1 }, 
  { expireAfterSeconds: 31536000 } // 365 d√≠as
);

print('‚úÖ Inicializaci√≥n de MongoDB completada');
print('üìä Base de datos: cobranza_ai');
print('üë§ Usuario de aplicaci√≥n: cobranza_user');
print('üîç √çndices creados para optimizaci√≥n');
print('‚úÖ Validaci√≥n de esquemas configurada');
print('‚è∞ TTL configurado para logs de comunicaciones');

// Insertar datos de configuraci√≥n inicial
db.configuracion.insertOne({
  version: "1.0.0",
  fechaCreacion: new Date(),
  configuracion: {
    retencionLogs: 365, // d√≠as
    limitesComunicacion: {
      smsD: 100,
      emailDiario: 500,
      whatsappDiario: 200
    },
    configuracionIA: {
      modelo: "gpt-4",
      maxTokens: 1000,
      temperatura: 0.7
    }
  }
});

print('‚öôÔ∏è Configuraci√≥n inicial insertada');