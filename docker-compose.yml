version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cobranza-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-cobranza_admin_2024}
      MONGO_INITDB_DATABASE: cobranza_ai
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    networks:
      - cobranza-network
    command: --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para cache y sesiones
  redis:
    image: redis:7.2-alpine
    container_name: cobranza-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cobranza-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cobranza_redis_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-cobranza_redis_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Application
  cobranza-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cobranza-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Base de datos
      MONGODB_URI: mongodb://admin:${MONGO_ROOT_PASSWORD:-cobranza_admin_2024}@mongodb:27017/cobranza_ai?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-cobranza_redis_2024}@redis:6379
      
      # Configuración del servidor
      NODE_ENV: production
      PORT: 3000
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-tu_jwt_secret_muy_seguro_2024_cobranza}
      
      # Email (Gmail)
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      
      # Twilio (SMS y WhatsApp)
      TWILIO_SID: ${TWILIO_SID}
      TWILIO_TOKEN: ${TWILIO_TOKEN}
      TWILIO_PHONE: ${TWILIO_PHONE}
      TWILIO_WHATSAPP: ${TWILIO_WHATSAPP}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # WhatsApp Business (opcional)
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN}
      WHATSAPP_PHONE_ID: ${WHATSAPP_PHONE_ID}
      WHATSAPP_VERIFY_TOKEN: ${WHATSAPP_VERIFY_TOKEN}
      
      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
      
      # Configuración de logs
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Rate limiting
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    
    networks:
      - cobranza-network
    
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (opcional, para SSL y load balancing)
  nginx:
    image: nginx:alpine
    container_name: cobranza-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - cobranza-network
    depends_on:
      - cobranza-backend

  # MongoDB Express para administración de BD (opcional, solo desarrollo)
  mongo-express:
    image: mongo-express:latest
    container_name: cobranza-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-cobranza_admin_2024}
      ME_CONFIG_MONGODB_URL: mongodb://admin:${MONGO_ROOT_PASSWORD:-cobranza_admin_2024}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS:-admin123}
    networks:
      - cobranza-network
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - development

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  cobranza-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16